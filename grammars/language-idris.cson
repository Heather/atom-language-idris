name: 'Idris'
scopeName: 'source.idris'
fileTypes: ['idr']
patterns:
  [
    {
      name: 'operator.assignment'
      match: '='
    }
    {
      name: 'keyword.control.idris'
      match: '\\b(if|then|else|do|let|in|data|codata|record|dsl)\\b'
    }
    {
      name: 'keyword.control.idris'
      match: '\\b(impossible|case|of|total|partial|mutual|infix|infixl|infixr)\\b'
    }
    {
      name: 'keyword.control.idris'
      match: '\\b(where|with|syntax|proof|postulate|using|namespace|class|instance)\\b'
    }
    {
      name: 'keyword.control.idris'
      match:  '\\b(public|private|abstract|implicit)\\b'
    }
    {
      name: 'storage.type.builtin.idris'
      match: '\\b(Type|Int|Nat|Integer|Float|Char|String|Ptr|Bits8|Bits16|Bits32|Bits64|Bool)\\b'
    }
    {
      name: 'constant.numeric.idris'
      match: '\\b(S|Z)\\b'
    }
    {
      match: '\\b([0-9]+|0([xX][0-9a-fA-F]+|[oO][0-7]+))\\b'
      name: 'constant.numeric.idris'
      comment: 'integer literal'
    }
    {
      match: '\\b([0-9]+\\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\\b'
      name: 'constant.numeric.float.idris'
      comment: 'float literal'
    }
    {
      match: '\\(\\)'
      name: 'constant.unit.idris'
    }
    {
      name: 'comment.line.idris'
      match: '(--).*$\n?'
      comment: 'Line comment'
    }
    {
      name: 'comment.block.idris'
      begin: '\\{-'
      end: '-\\}'
      comment: 'Block comment'
    }
    {
      name: 'string.quoted.double.idris'
      begin: '"'
      beginCaptures:
        0:
          name: 'punctuation.definition.string.begin.idris'
      end: '"'
      endCaptures:
        0:
          name: 'punctuation.definition.string.end.idris'
      patterns:
        [
          {
            include: '#escape_characters'
          }
        ]
    }
    {
      name: 'string.quoted.single.idris'
      begin: "'"
      beginCaptures:
        0:
          name: 'punctuation.definition.string.begin.idris'
      end: "'"
      endCaptures:
        0:
          name: 'punctuation.definition.string.end.idris'
      patterns:
        [
          {
            include: '#escape_characters'
          }
        ]
    }
    {
      name: 'keyword.operator.function.infix.idris'
      begin: '`'
      beginCaptures:
        0:
          name: 'punctuation.definition.entity.idris'
      end: '`'
      endCaptures:
        0:
          name: 'punctuation.definition.entity.idris'
    }
    {
      begin: '\\b(module)\\b'
      beginCaptures:
        1:
          name: 'keyword.control.idris'
      end: '($|;|(?=--))'
      name: 'meta.module.idris'
      patterns:
        [
          {
            match: "([a-zA-Z._']+)"
            name: 'meta.declaration.module.idris'
          }
        ]
    }
    {
      begin: '\\b(import)\\b'
      beginCaptures:
        1:
          name: 'keyword.other.idris'
      end: '($|;|(?=--))'
      name: 'meta.import.idris'
      patterns:
        [
          {
            match: "([a-zA-Z._']+)"
            name: 'support.other.module.idris'
          }
        ]
    }
  ]
repository:
  escape_characters:
    patterns:
      [
        {
          name: 'constant.character.escape.ascii.idris'
          match: '\\\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\"\'\\&])'
        }
        {
          name: 'constant.character.escape.octal.idris'
          match: '\\\\o[0-7]+|\\\\x[0-9A-Fa-f]+|\\\\[0-9]+'
        }
        {
          name: 'constant.character.escape.control.idris'
          match: '\\^[A-Z@\\[\\]\\\\\\^_]'
        }
      ]
uuid: '4dd16092-ffa5-4ba4-8075-e5da9f368a72'
